pipeline {
    agent { label 'node1' }

    tools {
      nodejs "nodejs"
    }
    
    environment {
        ECR_REPO = "techscrum"
        COMMIT_HASH = sh(returnStdout: true, script: 'git rev-parse HEAD').trim() 
    }


    stages {
        
        stage('Install') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('build') {
            steps {
                sh 'npm run build'
            }
        }

        // stage('Lint') {
        //     steps {
        //         sh 'npm run lint'
        //     }
        // }

        // stage('Test') {
        //     steps {
        //         sh 'npm run test'
        //     }
        // }

        stage('Push Docker Image to ECR') {
            environment {
                ENVIRONMENT = credentials('ENVIRONMENT')
                NAME = credentials(' NAME')
                PORT = credentials('PORT')
                API_PREFIX = credentials('API_PREFIX')
                AWS_REGION = credentials('AWS_REGION')
                AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
                ACCESS_SECRET = credentials('ACCESS_SECRET')
                EMAIL_SECRET = credentials('EMAIL_SECRET')
                FORGET_SECRET = credentials('FORGET_SECRET')
                LIMITER = credentials('LIMITER')
                PUBLIC_CONNECTION = credentials('PUBLIC_CONNECTION')
                TENANTS_CONNECTION = credentials('TENANTS_CONNECTION')
                MAIN_DOMAIN = credentials('MAIN_DOMAIN')
                DEVOPS_MODE = credentials('DEVOPS_MODE')
                AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE = credentials('AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE')
                ECR_REGISTRY = '271584491311.dkr.ecr.ap-southeast-2.amazonaws.com'
            }

            steps {
              sh 'docker build --build-arg ENVIRONMENT=${ENVIRONMENT} --build-arg  NAME=${NAME} --build-arg PORT=${PORT} --build-arg API_PREFIX=${API_PREFIX} --build-arg AWS_REGION=${AWS_REGION} --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --build-arg ACCESS_SECRET=${ACCESS_SECRET} --build-arg EMAIL_SECRET=${EMAIL_SECRET} --build-arg FORGET_SECRET=${FORGET_SECRET} --build-arg LIMITER=${LIMITER} --build-arg PUBLIC_CONNECTION=${PUBLIC_CONNECTION} --build-arg TENANTS_CONNECTION=${TENANTS_CONNECTION} --build-arg MAIN_DOMAIN=${MAIN_DOMAIN} --build-arg DEVOPS_MODE=${DEVOPS_MODE} --build-arg AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE=${AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE} -t $ECR_REPO:$COMMIT_HASH .'
              sh 'aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY'
              sh "docker tag $ECR_REPO:$COMMIT_HASH $ECR_REGISTRY/$ECR_REPO:$COMMIT_HASH"
              sh 'docker push $ECR_REGISTRY/$ECR_REPO:$COMMIT_HASH'
            }
         }
        
        stage('Update kubeconfig') {
            steps {
              sh "aws eks update-kubeconfig --name techscrum-uat --region ap-southeast-2"
           }
        }

        stage('Deploy to EKS') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
                AWS_DEFAULT_REGION = credentials('AWS_DEFAULT_REGION')
            }

            steps {
                sh 'envsubst < deployment.yaml | kubectl apply -f -'
            }
        }
    }

}







